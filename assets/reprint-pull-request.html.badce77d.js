import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as l,a as e,b as n,d as a,f as c,r as o}from"./app.83d5c408.js";const r={},d=e("h1",{id:"pullrequest-的命令行管理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pullrequest-的命令行管理","aria-hidden":"true"},"#"),n(" PullRequest 的命令行管理")],-1),u={href:"https://help.github.com/articles/about-pull-requests/",target:"_blank",rel:"noopener noreferrer"},p=e("p",null,[e("img",{src:"https://www.ruanyifeng.com/blogimg/asset/2017/bg2017071801.png",alt:"img",loading:"lazy"})],-1),m={href:"http://beust.com/weblog/2010/09/15/a-quick-guide-to-pull-requests/",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"一、pull-request-是什么",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、pull-request-是什么","aria-hidden":"true"},"#"),n(" 一、Pull Request 是什么？")],-1),b={href:"https://help.github.com/articles/about-pull-requests/",target:"_blank",rel:"noopener noreferrer"},g=e("blockquote",null,[e("p",null,'"Pull Request 是一种通知机制。你修改了他人的代码，将你的修改通知原来的作者，希望他合并你的修改，这就是 Pull Request。"')],-1),v=e("p",null,"Pull Request 本质上是一种软件的合作方式，是将涉及不同功能的代码，纳入主干的一种流程。这个过程中，还可以进行讨论、审核和修改代码。",-1),k=e("h2",{id:"二、pull-request-的流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二、pull-request-的流程","aria-hidden":"true"},"#"),n(" 二、Pull Request 的流程")],-1),f={href:"https://help.github.com/articles/fork-a-repo/",target:"_blank",rel:"noopener noreferrer"},_=c(`<p>第二步，在你仓库的修改后的分支上，按下&quot;New pull request&quot;按钮。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2017/bg2017071802.png" alt="img" loading="lazy"></p><p>这时，会进入一个新页面，有Base 和 Head 两个选项。Base 是你希望提交变更的目标，Head 是目前包含你的变更的那个分支或仓库。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2017/bg2017071806.png" alt="img" loading="lazy"></p><p>第三步，填写说明，帮助别人理解你的提交，然后按下&quot;create pull request&quot;按钮即可。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2017/bg2017071805.png" alt="img" loading="lazy"></p><p>PR 创建后，管理者就要决定是否接受该 PR。对于非代码变更（比如文档），单单使用 Web 界面就足够了。但是，对于代码变更，Web 界面可能不够用，需要命令行验证是否可以运行。</p><h2 id="三、git-am" tabindex="-1"><a class="header-anchor" href="#三、git-am" aria-hidden="true">#</a> 三、git am</h2><p><code>git am</code>命令用于将一个 patch 文件，合并进入当前代码。</p><p>Github 对每个 PR 会自动生成一个 patch 文件。我们下载该文件，合并进本地代码，就可以在本地查看效果了。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-L</span> http://github.com/cbeust/testng/pull/17.patch <span class="token operator">|</span> <span class="token function">git</span> am
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>上面代码中，<code>curl</code>的<code>-L</code>参数表示，如果有302跳转，<code>curl</code>会自动跟进。后面网址里面的<code>/cbeust/testng</code>是目标仓库，<code>pull/17</code>表示该仓库收到的第17个 PR。</p><p>如果 PR 只包含一个 commit，那么也可以直接下载这个 commit 的 patch 文件。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://github.com/sclasen/jcommander/commit/bd770141029f49bcfa2e0d6e6e6282b531e69179.patch <span class="token operator">|</span> <span class="token function">git</span> am
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>上面代码中，网址里面的<code>/sclasen/jcommander</code>是代码变更所在的那个仓库。</p><h2 id="四、创建远程仓库" tabindex="-1"><a class="header-anchor" href="#四、创建远程仓库" aria-hidden="true">#</a> 四、创建远程仓库</h2><p>另一种方法是为 PR 创建一个远程分支，追踪提交者的仓库。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建远程仓库，指向 PR 提交者的仓库</span>
$ <span class="token function">git</span> remote <span class="token function">add</span> nullin git://github.com/nullin/testng.git

<span class="token comment"># 从该远程仓库拉取代码</span>
$ <span class="token function">git</span> fetch nullin

<span class="token comment"># 将该仓库的某个分支合并到当前分支</span>
$ <span class="token function">git</span> merge kneath/error-page

<span class="token comment"># 推送到自己的仓库</span>
$ <span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="五、cherry-pick" tabindex="-1"><a class="header-anchor" href="#五、cherry-pick" aria-hidden="true">#</a> 五、cherry-pick</h2><p>有时，PR 里面包含好几个 commit，但是你只想合并其中的一个或几个。</p><p>这时可以使用<code>cherry-pick</code>命令，挑出你感兴趣的 commit。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 建立远程分支，追踪提交者的仓库</span>
$ <span class="token function">git</span> remote <span class="token function">add</span> nullin git://github.com/nullin/testng.git

<span class="token comment"># 从该远程仓库拉取代码</span>
$ <span class="token function">git</span> fetch nullin

<span class="token comment"># 只将感兴趣的 commit 加入当前代码</span>
$ <span class="token function">git</span> cherry-pick commit1
$ <span class="token function">git</span> cherry-pick commit2

<span class="token comment"># 推送到自己的仓库</span>
$ <span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>（完）</p>`,23);function q(P,R){const s=o("ExternalLinkIcon");return i(),l("div",null,[d,e("p",null,[n("Github 的一大特色就是 "),e("a",u,[n("Pull Request"),a(s)]),n(" 功能（简写为 PR）。")]),p,e("p",null,[n("对于多人合作的项目，该功能简直必不可少。大部分人都是使用 Web 界面（如上图），本文介绍如何在命令行下处理 PR，翻译自 Cédric Beust 的"),e("a",m,[n("文章"),a(s)]),n("。")]),h,e("p",null,[n("Github 官方文档的"),e("a",b,[n("定义"),a(s)]),n("如下。")]),g,v,k,e("p",null,[n("第一步，你需要把别人的代码，克隆到你自己的仓库，Github 的术语叫做 "),e("a",f,[n("fork"),a(s)]),n("。")]),_])}const y=t(r,[["render",q],["__file","reprint-pull-request.html.vue"]]);export{y as default};
