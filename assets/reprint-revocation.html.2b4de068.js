import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a,b as e,d as s,f as t,r as d}from"./app.835d1638.js";const l={},r=a("h1",{id:"git-撤销操作详解",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#git-撤销操作详解","aria-hidden":"true"},"#"),e(" Git 撤销操作详解")],-1),p=a("p",null,"Git 版本管理时，往往需要撤销某些操作。",-1),u={href:"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><img src="https://www.wangbase.com/blogimg/asset/201912/bg2019122401.jpg" alt="img" loading="lazy"></p><h2 id="一、撤销提交" tabindex="-1"><a class="header-anchor" href="#一、撤销提交" aria-hidden="true">#</a> 一、撤销提交</h2><p>一种常见的场景是，提交代码以后，你突然意识到这个提交有问题，应该撤销掉，这时执行下面的命令就可以了。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> revert HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>上面命令的原理是，在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。</p><p><code>git revert</code> 命令只能抵消上一个提交，如果想抵消多个提交，必须在命令行依次指定这些提交。比如，抵消前两个提交，要像下面这样写。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>倒数第一个提交<span class="token punctuation">]</span> <span class="token punctuation">[</span>倒数第二个提交<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><code>git revert</code>命令还有两个参数。</p><blockquote><ul><li><code>--no-edit</code>：执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。</li><li><code>--no-commit</code>：只抵消暂存区和工作区的文件变化，不产生新的提交。</li></ul></blockquote><h2 id="二、丢弃提交" tabindex="-1"><a class="header-anchor" href="#二、丢弃提交" aria-hidden="true">#</a> 二、丢弃提交</h2><p>如果希望以前的提交在历史中彻底消失，而不是被抵消掉，可以使用<code>git reset</code>命令，丢弃掉某个提交之后的所有提交。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>last good SHA<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><code>git reset</code>的原理是，让最新提交的指针回到以前某个时点，该时点之后的提交都从历史中消失。</p><p>默认情况下，<code>git reset</code>不改变工作区的文件（但会改变暂存区），<code>--hard</code>参数可以让工作区里面的文件也回到以前的状态。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>last good SHA<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote>`,15),b=a("code",null,"git reset",-1),m=a("code",null,"git reflog",-1),v={href:"https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/#redo-after-undo-local",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="三、替换上一次提交" tabindex="-1"><a class="header-anchor" href="#三、替换上一次提交" aria-hidden="true">#</a> 三、替换上一次提交</h2><p>提交以后，发现提交信息写错了，这时可以使用<code>git commit</code>命令的<code>--amend</code>参数，可以修改上一次的提交信息。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;Fixes bug #42&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>它的原理是产生一个新的提交对象，替换掉上一次提交产生的提交对象。</p><p>这时如果暂存区有发生变化的文件，会一起提交到仓库。所以，<code>--amend</code>不仅可以修改提交信息，还可以整个把上一次提交替换掉。</p><h2 id="四、撤销工作区的文件修改" tabindex="-1"><a class="header-anchor" href="#四、撤销工作区的文件修改" aria-hidden="true">#</a> 四、撤销工作区的文件修改</h2><p>如果工作区的某个文件被改乱了，但还没有提交，可以用<code>git checkout</code>命令找回本次修改之前的文件。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout -- <span class="token punctuation">[</span>filename<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>它的原理是先找暂存区，如果该文件有暂存的版本，则恢复该版本，否则恢复上一次提交的版本。</p><p>注意，工作区的文件变化一旦被撤销，就无法找回了。</p><h2 id="五、从暂存区撤销文件" tabindex="-1"><a class="header-anchor" href="#五、从暂存区撤销文件" aria-hidden="true">#</a> 五、从暂存区撤销文件</h2><p>如果不小心把一个文件添加到暂存区，可以用下面的命令撤销。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>上面的命令不影响已经提交的内容。</p><h2 id="六、撤销当前分支的变化" tabindex="-1"><a class="header-anchor" href="#六、撤销当前分支的变化" aria-hidden="true">#</a> 六、撤销当前分支的变化</h2><p>你在当前分支上做了几次提交，突然发现放错了分支，这几个提交本应该放到另一个分支。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 新建一个 feature 分支，指向当前最新的提交</span>
<span class="token comment"># 注意，这时依然停留在当前分支</span>
$ <span class="token function">git</span> branch feature

<span class="token comment"># 切换到这几次提交之前的状态</span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>当前分支此前的最后一次提交<span class="token punctuation">]</span>

<span class="token comment"># 切换到 feature 分支</span>
$ <span class="token function">git</span> checkout feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>上面的操作等于是撤销当前分支的变化，将这些变化放到一个新建的分支。</p><p>（完）</p>`,19);function k(f,_){const n=d("ExternalLinkIcon");return o(),c("div",null,[r,p,a("p",null,[e("本文介绍几种最主要的情况，给出详细的解释。更多的命令可以参考"),a("a",u,[e("《常用 Git 命令清单》"),s(n)]),e("一文。")]),h,a("p",null,[e("执行"),b,e("命令之后，如果想找回那些丢弃掉的提交，可以使用"),m,e("命令，具体做法参考"),a("a",v,[e("这里"),s(n)]),e("。不过，这种做法有时效性，时间长了可能找不回来。")]),g])}const $=i(l,[["render",k],["__file","reprint-revocation.html.vue"]]);export{$ as default};
