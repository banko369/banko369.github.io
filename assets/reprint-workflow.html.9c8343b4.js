import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,a as e,b as o,d as r,f as l,r as n}from"./app.0c5269f2.js";const c={},d=l('<h1 id="git-工作流程" tabindex="-1"><a class="header-anchor" href="#git-工作流程" aria-hidden="true">#</a> Git 工作流程</h1><p>Git 作为一个源码管理系统，不可避免涉及到多人协作。</p><p>协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。&quot;工作流程&quot;在英语里，叫做&quot;workflow&quot;或者&quot;flow&quot;，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122301.png" alt="img" loading="lazy"></p><p>本文介绍三种广泛使用的工作流程：</p><blockquote><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul></blockquote><p>如果你对Git还不是很熟悉，可以先阅读下面的文章。</p>',7),h={href:"https://www.ruanyifeng.com/blog/2015/08/git-use-process.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.ruanyifeng.com/blog/2014/06/git_remote.html",target:"_blank",rel:"noopener noreferrer"},_=e("h2",{id:"一、功能驱动",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、功能驱动","aria-hidden":"true"},"#"),o(" 一、功能驱动")],-1),g={href:"https://en.wikipedia.org/wiki/Feature-driven_development",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。",-1),f=e("h2",{id:"二、git-flow",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二、git-flow","aria-hidden":"true"},"#"),o(" 二、Git flow")],-1),b={href:"http://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"},w=l('<h3 id="_2-1-特点" tabindex="-1"><a class="header-anchor" href="#_2-1-特点" aria-hidden="true">#</a> 2.1 特点</h3><p>它最主要的特点有两个。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122302.png" alt="img" loading="lazy"></p><p>首先，项目存在两个长期分支。</p><blockquote><ul><li>主分支<code>master</code></li><li>开发分支<code>develop</code></li></ul></blockquote><p>前者用于存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的分布版；后者用于日常开发，存放最新的开发版。</p><p>其次，项目存在三种短期分支。</p><blockquote><ul><li>功能分支（feature branch）</li><li>补丁分支（hotfix branch）</li><li>预发分支（release branch）</li></ul></blockquote><p>一旦完成开发，它们就会被合并进<code>develop</code>或<code>master</code>，然后被删除。</p>',9),q={href:"https://www.ruanyifeng.com/blog/2012/07/git.html",target:"_blank",rel:"noopener noreferrer"},k=l('<h3 id="_2-2-评价" tabindex="-1"><a class="header-anchor" href="#_2-2-评价" aria-hidden="true">#</a> 2.2 评价</h3><p>Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。大多数工具都将<code>master</code>当作默认分支，可是开发是在<code>develop</code>分支进行的，这导致经常要切换分支，非常烦人。</p><p>更大问题在于，这个模式是基于&quot;版本发布&quot;的，目标是一段时间以后产出一个新版本。但是，很多网站项目是&quot;持续发布&quot;，代码一有变动，就部署一次。这时，<code>master</code>分支和<code>develop</code>分支的差别不大，没必要维护两个长期分支。</p><h2 id="三、github-flow" tabindex="-1"><a class="header-anchor" href="#三、github-flow" aria-hidden="true">#</a> 三、Github flow</h2>',4),G={href:"http://scottchacon.com/2011/08/31/github-flow.html",target:"_blank",rel:"noopener noreferrer"},x={href:"http://Github.com",target:"_blank",rel:"noopener noreferrer"},y=e("h3",{id:"_3-1-流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-1-流程","aria-hidden":"true"},"#"),o(" 3.1 流程")],-1),v=e("p",null,[o("它只有一个长期分支，就是"),e("code",null,"master"),o("，因此用起来非常简单。")],-1),P={href:"https://guides.github.com/introduction/flow/index.html",target:"_blank",rel:"noopener noreferrer"},R=e("p",null,[e("img",{src:"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122305.png",alt:"img",loading:"lazy"})],-1),z=e("p",null,[o("第一步：根据需求，从"),e("code",null,"master"),o("拉出新分支，不区分功能分支或补丁分支。")],-1),I=e("code",null,"master",-1),B={href:"https://help.github.com/articles/using-pull-requests/",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,"第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。",-1),V=e("p",null,[o("第四步：你的Pull Request被接受，合并进"),e("code",null,"master"),o("，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）")],-1),E=l('<h3 id="_3-2-评价" tabindex="-1"><a class="header-anchor" href="#_3-2-评价" aria-hidden="true">#</a> 3.2 评价</h3><p>Github flow 的最大优点就是简单，对于&quot;持续发布&quot;的产品，可以说是最合适的流程。</p><p>问题在于它的假设：<code>master</code>分支的更新与产品的发布是一致的。也就是说，<code>master</code>分支的最新代码，默认就是当前的线上代码。</p><p>可是，有些时候并非如此，代码合并进入<code>master</code>分支，并不代表它就能立刻发布。比如，苹果商店的APP提交审核以后，等一段时间才能上架。这时，如果还有新的代码提交，<code>master</code>分支就会与刚发布的版本不一致。另一个例子是，有些公司有发布窗口，只有指定时间才能发布，这也会导致线上版本落后于<code>master</code>分支。</p><p>上面这种情况，只有<code>master</code>一个主分支就不够用了。通常，你不得不在<code>master</code>分支以外，另外新建一个<code>production</code>分支跟踪线上版本。</p><h2 id="四、gitlab-flow" tabindex="-1"><a class="header-anchor" href="#四、gitlab-flow" aria-hidden="true">#</a> 四、Gitlab flow</h2>',6),F={href:"https://docs.gitlab.com/ee/workflow/gitlab_flow.html",target:"_blank",rel:"noopener noreferrer"},L={href:"http://Gitlab.com",target:"_blank",rel:"noopener noreferrer"},C=e("h3",{id:"_4-1-上游优先",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-1-上游优先","aria-hidden":"true"},"#"),o(" 4.1 上游优先")],-1),D=e("p",null,[o('Gitlab flow 的最大原则叫做"上游优先"（upsteam first），即只存在一个主分支'),e("code",null,"master"),o('，它是所有其他分支的"上游"。只有上游分支采纳的代码变化，才能应用到其他分支。')],-1),M={href:"https://www.chromium.org/chromium-os/chromiumos-design-docs/upstream-first",target:"_blank",rel:"noopener noreferrer"},S=l('<blockquote><ol><li>Linus Torvalds的分支</li><li>子系统（比如netdev）的分支</li><li>设备厂商（比如三星）的分支</li></ol></blockquote><h3 id="_4-2-持续发布" tabindex="-1"><a class="header-anchor" href="#_4-2-持续发布" aria-hidden="true">#</a> 4.2 持续发布</h3><p>Gitlab flow 分成两种情况，适应不同的开发流程。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122306.png" alt="img" loading="lazy"></p><p>对于&quot;持续发布&quot;的项目，它建议在<code>master</code>分支以外，再建立不同的环境分支。比如，&quot;开发环境&quot;的分支是<code>master</code>，&quot;预发环境&quot;的分支是<code>pre-production</code>，&quot;生产环境&quot;的分支是<code>production</code>。</p><p>开发分支是预发分支的&quot;上游&quot;，预发分支又是生产分支的&quot;上游&quot;。代码的变化，必须由&quot;上游&quot;向&quot;下游&quot;发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到<code>master</code>，确认没有问题，再<code>cherry-pick</code>到<code>pre-production</code>，这一步也没有问题，才进入<code>production</code>。</p><p>只有紧急情况，才允许跳过上游，直接合并到下游分支。</p><h3 id="_4-3-版本发布" tabindex="-1"><a class="header-anchor" href="#_4-3-版本发布" aria-hidden="true">#</a> 4.3 版本发布</h3><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122307.png" alt="img" loading="lazy"></p><p>对于&quot;版本发布&quot;的项目，建议的做法是每一个稳定版本，都要从<code>master</code>分支拉出一个分支，比如<code>2-3-stable</code>、<code>2-4-stable</code>等等。</p><p>以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p><h2 id="五、一些小技巧" tabindex="-1"><a class="header-anchor" href="#五、一些小技巧" aria-hidden="true">#</a> 五、一些小技巧</h2><h3 id="_5-1-pull-request" tabindex="-1"><a class="header-anchor" href="#_5-1-pull-request" aria-hidden="true">#</a> 5.1 Pull Request</h3><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122310.png" alt="img" loading="lazy"></p><p>功能分支合并进<code>master</code>分支，必须通过Pull Request（Gitlab里面叫做 Merge Request）。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122308.png" alt="img" loading="lazy"></p>',16),T=e("code",null,"@",-1),A={href:"https://github.com/blog/1004-mention-autocompletion",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/blog/1121-introducing-team-mentions",target:"_blank",rel:"noopener noreferrer"},j=e("h3",{id:"_5-2-protected-branch",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-2-protected-branch","aria-hidden":"true"},"#"),o(" 5.2 Protected branch")],-1),H=e("p",null,[e("code",null,"master"),o("分支应该受到保护，不是每个人都可以修改这个分支，以及拥有审批 Pull Request 的权力。")],-1),J={href:"https://help.github.com/articles/about-protected-branches/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://docs.gitlab.com/ce/permissions/permissions.html",target:"_blank",rel:"noopener noreferrer"},O=e("h3",{id:"_5-3-issue",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-3-issue","aria-hidden":"true"},"#"),o(" 5.3 Issue")],-1),Q=e("p",null,"Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。",-1),U=e("p",null,'功能分支的名称，可以与issue的名字保持一致，并且以issue的编号起首，比如"15-require-a-password-to-change-it"。',-1),X=e("p",null,[e("img",{src:"https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122311.png",alt:"img",loading:"lazy"})],-1),Y={href:"https://help.github.com/articles/closing-issues-via-commit-messages/",target:"_blank",rel:"noopener noreferrer"},Z=l('<blockquote><ul><li>close</li><li>closes</li><li>closed</li><li>fix</li><li>fixes</li><li>fixed</li><li>resolve</li><li>resolves</li><li>resolved</li></ul></blockquote><p>这种方式还可以一次关闭多个issue，或者关闭其他代码库的issue，格式是<code>username/repository#issue_number</code>。</p><p>Pull Request被接受以后，issue关闭，原始分支就应该删除。如果以后该issue重新打开，新分支可以复用原来的名字。</p><h3 id="_5-4-merge节点" tabindex="-1"><a class="header-anchor" href="#_5-4-merge节点" aria-hidden="true">#</a> 5.4 Merge节点</h3><p>Git有两种合并：一种是&quot;直进式合并&quot;（fast forward），不生成单独的合并节点；另一种是&quot;非直进式合并&quot;（none fast-forword），会生成单独节点。</p><p>前者不利于保持commit信息的清晰，也不利于以后的回滚，建议总是采用后者（即使用<code>--no-ff</code>参数）。只要发生合并，就要有一个单独的合并节点。</p><h3 id="_5-5-squash-多个commit" tabindex="-1"><a class="header-anchor" href="#_5-5-squash-多个commit" aria-hidden="true">#</a> 5.5 Squash 多个commit</h3><p>为了便于他人阅读你的提交，也便于<code>cherry-pick</code>或撤销代码变化，在发起Pull Request之前，应该把多个commit合并成一个。（前提是，该分支只有你一个人开发，且没有跟<code>master</code>合并过。）</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015122309.png" alt="img" loading="lazy"></p>',9),$=e("code",null,"rebase",-1),ee=e("code",null,"squash",-1),oe={href:"https://www.ruanyifeng.com/blog/2015/08/git-use-process.html",target:"_blank",rel:"noopener noreferrer"},te=e("p",null,"（完）",-1);function re(le,ie){const t=n("ExternalLinkIcon");return a(),s("div",null,[d,e("blockquote",null,[e("ul",null,[e("li",null,[e("a",h,[o("《Git 使用规范流程》"),r(t)])]),e("li",null,[e("a",u,[o("《常用 Git 命令清单》"),r(t)])]),e("li",null,[e("a",p,[o("《Git 远程操作详解》"),r(t)])])])]),_,e("p",null,[o("本文的三种工作流程，有一个共同点：都采用"),e("a",g,[o('"功能驱动式开发"'),r(t)]),o("（Feature-driven development，简称FDD）。")]),m,f,e("p",null,[o("最早诞生、并得到广泛采用的一种工作流程，就是"),e("a",b,[o("Git flow"),r(t)]),o(" 。")]),w,e("p",null,[o("Git flow 的详细介绍，请阅读我翻译的中文版"),e("a",q,[o("《Git 分支管理策略》"),r(t)]),o("。")]),k,e("p",null,[e("a",G,[o("Github flow"),r(t)]),o(' 是Git flow的简化版，专门配合"持续发布"。它是 '),e("a",x,[o("Github.com"),r(t)]),o(" 使用的工作流程。")]),y,v,e("p",null,[o("官方推荐的"),e("a",P,[o("流程"),r(t)]),o("如下。")]),R,e("blockquote",null,[z,e("p",null,[o("第二步：新分支开发完成后，或者需要讨论的时候，就向"),I,o("发起一个"),e("a",B,[o("pull request"),r(t)]),o("（简称PR）。")]),N,V]),E,e("p",null,[e("a",F,[o("Gitlab flow"),r(t)]),o(" 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 "),e("a",L,[o("Gitlab.com"),r(t)]),o(" 推荐的做法。")]),C,D,e("p",null,[e("a",M,[o("Chromium项目"),r(t)]),o("就是一个例子，它明确规定，上游分支依次为：")]),S,e("p",null,[o("前面说过，Pull Request本质是一种对话机制，你可以在提交的时候，"),T,o("相关"),e("a",A,[o("人员"),r(t)]),o("或"),e("a",W,[o("团队"),r(t)]),o("，引起他们的注意。")]),j,H,e("p",null,[e("a",J,[o("Github"),r(t)]),o(" 和 "),e("a",K,[o("Gitlab"),r(t)]),o(' 都提供"保护分支"（Protected branch）这个功能。')]),O,Q,U,X,e("p",null,[o('开发完成后，在提交说明里面，可以写上"fixes #14"或者"closes #67"。Github规定，只要commit message里面有下面这些'),e("a",Y,[o("动词"),r(t)]),o(" + 编号，就会关闭对应的issue。")]),Z,e("p",null,[o("这可以采用"),$,o("命令附带的"),ee,o("操作，具体方法请参考我写的"),e("a",oe,[o("《Git 使用规范流程》"),r(t)]),o("。")]),te])}const ne=i(c,[["render",re],["__file","reprint-workflow.html.vue"]]);export{ne as default};
